package com.asu.cse545.group12.controller;


import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.asu.cse545.group12.dao.TransactionDao;
import com.asu.cse545.group12.dao.UserDao;
import com.asu.cse545.group12.domain.Account;
import com.asu.cse545.group12.domain.TransactionForm;
import com.asu.cse545.group12.domain.Transactions;
import com.asu.cse545.group12.domain.Users;
import com.asu.cse545.group12.pdf.CreatePDF;
import com.asu.cse545.group12.services.AccountService;
import com.asu.cse545.group12.validator.TransactionInputValidator;

import org.apache.log4j.Logger;
import org.omg.IOP.TransactionService;
/**
 * A Spring controller that allows the users to download a PDF document
 * generated by the iText library.

 * 
 */
@Controller
public class PDFController {

	private static final Logger logger = Logger.getLogger(PDFController.class);
	@Autowired
	UserDao userDao;

	@Autowired
	AccountService accountService;

	@Autowired
	TransactionDao transactionDao;

	@RequestMapping(value = "/bankStatement", method = RequestMethod.GET)
	public ModelAndView getCreditForm(HttpServletRequest request) {

		String username = (String) request.getSession().getAttribute("username");
		Users user = userDao.getUserByUserName(username);
		List<String> accountNumbers = new ArrayList<String>();
		for (Account account : accountService.getAccounts(user.getUserId())) {
			accountNumbers.add(""+account.getAccountNumber());
		}
		//

		//logs debug message
		if(logger.isDebugEnabled()){
			logger.debug("bank statement Screen is executed!");
		}
		ModelAndView modelView = new ModelAndView();

		modelView.addObject("form", new TransactionForm());
		modelView.addObject("accounts", accountNumbers);
		modelView.setViewName("bankStatement");
		return modelView;
	}

	@RequestMapping(value = "/downloadPDF")
	public ModelAndView downloadPDF(@Valid @ModelAttribute("form") TransactionForm form, BindingResult result, HttpServletRequest request, HttpServletResponse response) throws IOException {

		String username = (String) request.getSession().getAttribute("username");
		Users user = userDao.getUserByUserName(username);


		//convert the string dates
		TransactionInputValidator transactionInputValidator = new TransactionInputValidator();
		transactionInputValidator.validate(form, result);

		if (result.hasErrors()) {
			ModelAndView modelView = new ModelAndView();
			modelView.addObject("form", form);
			if(logger.isDebugEnabled()){
				logger.debug("************************************************8error while creating download");
			}
			
			List<String> accountNumbers = new ArrayList<String>();
			for (Account account : accountService.getAccounts(user.getUserId())) {
				accountNumbers.add(""+account.getAccountNumber());
			}
			modelView.addObject("form", form);
			modelView.addObject("accounts", accountNumbers);
			modelView.setViewName("bankStatement");
			return modelView;
		} else {
			List<Transactions> transactions = transactionDao.getTransactionsBetweenDates(Integer.parseInt(form.getToAccount()), form.getFromDate(), form.getToDate());
			final ServletContext servletContext = request.getSession().getServletContext();
			final File tempDirectory = (File) servletContext.getAttribute("javax.servlet.context.tempdir");
			final String temperotyFilePath = tempDirectory.getAbsolutePath();

			String fileName = "bankstatement.pdf";
			response.setContentType("application/pdf");
			response.setHeader("Content-disposition", "attachment; filename="+ fileName);

			try {

				CreatePDF.createPDF(temperotyFilePath+"\\"+fileName, transactions, form.getToAccount(), user);
				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				baos = convertPDFToByteArrayOutputStream(temperotyFilePath+"\\"+fileName);
				OutputStream os = response.getOutputStream();
				baos.writeTo(os);
				os.flush();
			} catch (Exception e1) {
				e1.printStackTrace();
				ModelAndView modelView = new ModelAndView();
				modelView.addObject("successfulMessage", "Successful! PDF is created successful for transactions.");
				modelView.setViewName("successful");
				return modelView;
			}

			ModelAndView modelView = new ModelAndView();
			modelView.addObject("successfulMessage", "Successful! PDF is created successful for transactions.");
			modelView.setViewName("successful");
			return modelView;
		}

	}

	private ByteArrayOutputStream convertPDFToByteArrayOutputStream(String fileName) {

		InputStream inputStream = null;
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {

			inputStream = new FileInputStream(fileName);
			byte[] buffer = new byte[1024];
			baos = new ByteArrayOutputStream();

			int bytesRead;
			while ((bytesRead = inputStream.read(buffer)) != -1) {
				baos.write(buffer, 0, bytesRead);
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (inputStream != null) {
				try {
					inputStream.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return baos;
	}

}